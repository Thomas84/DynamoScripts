{
  "Uuid": "da740578-bc01-47a7-aaca-3211834d5fe7",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Levels - Create",
  "ElementResolver": {
    "ResolutionMap": {
      "DSOffice.Data": {
        "Key": "DSOffice.Data",
        "Value": "DSOffice.dll"
      },
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "Level": {
        "Key": "Revit.Elements.Level",
        "Value": "RevitNodes.dll"
      },
      "FloorPlanView": {
        "Key": "Revit.Elements.Views.FloorPlanView",
        "Value": "RevitNodes.dll"
      },
      "CeilingPlanView": {
        "Key": "Revit.Elements.Views.CeilingPlanView",
        "Value": "RevitNodes.dll"
      },
      "StructuralPlanView": {
        "Key": "Revit.Elements.Views.StructuralPlanView",
        "Value": "RevitNodes.dll"
      },
      "DSCore.List": {
        "Key": "DSCore.List",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "fedeee84f4b44ab18679888ffabab8d2",
      "Inputs": [
        {
          "Id": "9fc76c826db846afb6c69191c3f34284",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "17e06967927f47efbf9a478cb362d591",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\Work\\Dynamo\\Data.xlsx",
      "InputValue": "Work\\Dynamo\\Data.xlsx",
      "NodeType": "ExtensionNode",
      "Id": "310820ab9b6c46e5a2126b8f8a53205b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a1308a07e9344dd6adbb4539cef6ba79",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Import Excel Data\nImportExcelFile = DSOffice.Data.ImportExcel(ExcelFile, \"Levels\", false, false);\nRemoveHeaders\t= DSCore.List.RestOfItems(ImportExcelFile);\nExcelData \t\t= DSCore.List.Transpose(RemoveHeaders);\n\n//Level Names & Elevations\nLevelNames \t\t= ExcelData[0];\nLevelElevations = ExcelData[1];\n\n//Create Levels & Plans\nCreateLevels \t      = Level.ByElevationAndName(LevelElevations, LevelNames);\nCreateFloorPlans      = FloorPlanView.ByLevel(CreateLevels);\nCreateCeilingPlans \t  = CeilingPlanView.ByLevel(CreateLevels);\nCreateStructuralPlans = StructuralPlanView.ByLevel(CreateLevels);",
      "Id": "4d177cc467f5408c94fb7d96803c7211",
      "Inputs": [
        {
          "Id": "ecd79479f88c4f78bc2138c4d134f18e",
          "Name": "ExcelFile",
          "Description": "ExcelFile",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3174bca8f665478ebc95a60fc7fbdd66",
          "Name": "",
          "Description": "ImportExcelFile",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "182b09747d354a099d6f76da4fb13447",
          "Name": "",
          "Description": "RemoveHeaders",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f95afb9cb884384a062ed59c7c3501d",
          "Name": "",
          "Description": "ExcelData",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6be335968ee1443fada2427a7e813e56",
          "Name": "",
          "Description": "LevelNames",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3d3e0fd7ee64e4ab814b45d08ee396e",
          "Name": "",
          "Description": "LevelElevations",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e75f6c4788f449cd9d06b094490b2d7c",
          "Name": "",
          "Description": "CreateLevels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0312bf05c8d54ece912d8d9ce3f84208",
          "Name": "",
          "Description": "CreateFloorPlans",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd74d28a55ff4f5c8c7d9a5f60c8fee3",
          "Name": "",
          "Description": "CreateCeilingPlans",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f991a3914e6044809f6e9d283fb21adf",
          "Name": "",
          "Description": "CreateStructuralPlans",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    }
  ],
  "Connectors": [
    {
      "Start": "17e06967927f47efbf9a478cb362d591",
      "End": "ecd79479f88c4f78bc2138c4d134f18e",
      "Id": "1f8d6aaecea447129c6b10e543d07899"
    },
    {
      "Start": "a1308a07e9344dd6adbb4539cef6ba79",
      "End": "9fc76c826db846afb6c69191c3f34284",
      "Id": "4fcc9413b5b74a54b2b1ec93e6561de2"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [
    {
      "NodeId": "4d177cc4-67f5-408c-94fb-7d96803c7211",
      "Binding": {
        "ByElevationAndName_InClassDecl-1_InFunctionScope-1_Instance5_4d177cc4-67f5-408c-94fb-7d96803c7211": "",
        "ByLevel_InClassDecl-1_InFunctionScope-1_Instance6_4d177cc4-67f5-408c-94fb-7d96803c7211": "",
        "ByLevel_InClassDecl-1_InFunctionScope-1_Instance7_4d177cc4-67f5-408c-94fb-7d96803c7211": "",
        "ByLevel_InClassDecl-1_InFunctionScope-1_Instance8_4d177cc4-67f5-408c-94fb-7d96803c7211": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "fedeee84f4b44ab18679888ffabab8d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 537.4021652932654,
        "Y": 294.43136573548355
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "310820ab9b6c46e5a2126b8f8a53205b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 342.60488348130946,
        "Y": 294.43136573548355
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4d177cc467f5408c94fb7d96803c7211",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 675.035540302433,
        "Y": 294.43136573548355
      }
    ],
    "Annotations": [],
    "X": -455.34853234809725,
    "Y": -136.22503956442944,
    "Zoom": 1.4166421897327539
  }
}